function noop() { }
function assign(tar, src) {
    // @ts-ignore
    for (const k in src)
        tar[k] = src[k];
    return tar;
}
function run(fn) {
    return fn();
}
function blank_object() {
    return Object.create(null);
}
function run_all(fns) {
    fns.forEach(run);
}
function is_function(thing) {
    return typeof thing === 'function';
}
function safe_not_equal(a, b) {
    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}
function create_slot(definition, ctx, $$scope, fn) {
    if (definition) {
        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
        return definition[0](slot_ctx);
    }
}
function get_slot_context(definition, ctx, $$scope, fn) {
    return definition[1] && fn
        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
        : $$scope.ctx;
}
function get_slot_changes(definition, $$scope, dirty, fn) {
    if (definition[2] && fn) {
        const lets = definition[2](fn(dirty));
        if ($$scope.dirty === undefined) {
            return lets;
        }
        if (typeof lets === 'object') {
            const merged = [];
            const len = Math.max($$scope.dirty.length, lets.length);
            for (let i = 0; i < len; i += 1) {
                merged[i] = $$scope.dirty[i] | lets[i];
            }
            return merged;
        }
        return $$scope.dirty | lets;
    }
    return $$scope.dirty;
}
function action_destroyer(action_result) {
    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;
}

function append(target, node) {
    target.appendChild(node);
}
function insert(target, node, anchor) {
    target.insertBefore(node, anchor || null);
}
function detach(node) {
    node.parentNode.removeChild(node);
}
function element(name) {
    return document.createElement(name);
}
function text(data) {
    return document.createTextNode(data);
}
function space() {
    return text(' ');
}
function listen(node, event, handler, options) {
    node.addEventListener(event, handler, options);
    return () => node.removeEventListener(event, handler, options);
}
function attr(node, attribute, value) {
    if (value == null)
        node.removeAttribute(attribute);
    else if (node.getAttribute(attribute) !== value)
        node.setAttribute(attribute, value);
}
function children(element) {
    return Array.from(element.childNodes);
}
function toggle_class(element, name, toggle) {
    element.classList[toggle ? 'add' : 'remove'](name);
}
function custom_event(type, detail) {
    const e = document.createEvent('CustomEvent');
    e.initCustomEvent(type, false, false, detail);
    return e;
}

let current_component;
function set_current_component(component) {
    current_component = component;
}
function get_current_component() {
    if (!current_component)
        throw new Error(`Function called outside component initialization`);
    return current_component;
}
function createEventDispatcher() {
    const component = get_current_component();
    return (type, detail) => {
        const callbacks = component.$$.callbacks[type];
        if (callbacks) {
            // TODO are there situations where events could be dispatched
            // in a server (non-DOM) environment?
            const event = custom_event(type, detail);
            callbacks.slice().forEach(fn => {
                fn.call(component, event);
            });
        }
    };
}

const dirty_components = [];
const binding_callbacks = [];
const render_callbacks = [];
const flush_callbacks = [];
const resolved_promise = Promise.resolve();
let update_scheduled = false;
function schedule_update() {
    if (!update_scheduled) {
        update_scheduled = true;
        resolved_promise.then(flush);
    }
}
function add_render_callback(fn) {
    render_callbacks.push(fn);
}
function add_flush_callback(fn) {
    flush_callbacks.push(fn);
}
let flushing = false;
const seen_callbacks = new Set();
function flush() {
    if (flushing)
        return;
    flushing = true;
    do {
        // first, call beforeUpdate functions
        // and update components
        for (let i = 0; i < dirty_components.length; i += 1) {
            const component = dirty_components[i];
            set_current_component(component);
            update(component.$$);
        }
        dirty_components.length = 0;
        while (binding_callbacks.length)
            binding_callbacks.pop()();
        // then, once components are updated, call
        // afterUpdate functions. This may cause
        // subsequent updates...
        for (let i = 0; i < render_callbacks.length; i += 1) {
            const callback = render_callbacks[i];
            if (!seen_callbacks.has(callback)) {
                // ...so guard against infinite loops
                seen_callbacks.add(callback);
                callback();
            }
        }
        render_callbacks.length = 0;
    } while (dirty_components.length);
    while (flush_callbacks.length) {
        flush_callbacks.pop()();
    }
    update_scheduled = false;
    flushing = false;
    seen_callbacks.clear();
}
function update($$) {
    if ($$.fragment !== null) {
        $$.update();
        run_all($$.before_update);
        const dirty = $$.dirty;
        $$.dirty = [-1];
        $$.fragment && $$.fragment.p($$.ctx, dirty);
        $$.after_update.forEach(add_render_callback);
    }
}
const outroing = new Set();
let outros;
function group_outros() {
    outros = {
        r: 0,
        c: [],
        p: outros // parent group
    };
}
function check_outros() {
    if (!outros.r) {
        run_all(outros.c);
    }
    outros = outros.p;
}
function transition_in(block, local) {
    if (block && block.i) {
        outroing.delete(block);
        block.i(local);
    }
}
function transition_out(block, local, detach, callback) {
    if (block && block.o) {
        if (outroing.has(block))
            return;
        outroing.add(block);
        outros.c.push(() => {
            outroing.delete(block);
            if (callback) {
                if (detach)
                    block.d(1);
                callback();
            }
        });
        block.o(local);
    }
}

function bind(component, name, callback) {
    const index = component.$$.props[name];
    if (index !== undefined) {
        component.$$.bound[index] = callback;
        callback(component.$$.ctx[index]);
    }
}
function create_component(block) {
    block && block.c();
}
function mount_component(component, target, anchor) {
    const { fragment, on_mount, on_destroy, after_update } = component.$$;
    fragment && fragment.m(target, anchor);
    // onMount happens before the initial afterUpdate
    add_render_callback(() => {
        const new_on_destroy = on_mount.map(run).filter(is_function);
        if (on_destroy) {
            on_destroy.push(...new_on_destroy);
        }
        else {
            // Edge case - component was destroyed immediately,
            // most likely as a result of a binding initialising
            run_all(new_on_destroy);
        }
        component.$$.on_mount = [];
    });
    after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
    const $$ = component.$$;
    if ($$.fragment !== null) {
        run_all($$.on_destroy);
        $$.fragment && $$.fragment.d(detaching);
        // TODO null out other refs, including component.$$ (but need to
        // preserve final state?)
        $$.on_destroy = $$.fragment = null;
        $$.ctx = [];
    }
}
function make_dirty(component, i) {
    if (component.$$.dirty[0] === -1) {
        dirty_components.push(component);
        schedule_update();
        component.$$.dirty.fill(0);
    }
    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
}
function init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {
    const parent_component = current_component;
    set_current_component(component);
    const prop_values = options.props || {};
    const $$ = component.$$ = {
        fragment: null,
        ctx: null,
        // state
        props,
        update: noop,
        not_equal,
        bound: blank_object(),
        // lifecycle
        on_mount: [],
        on_destroy: [],
        before_update: [],
        after_update: [],
        context: new Map(parent_component ? parent_component.$$.context : []),
        // everything else
        callbacks: blank_object(),
        dirty
    };
    let ready = false;
    $$.ctx = instance
        ? instance(component, prop_values, (i, ret, ...rest) => {
            const value = rest.length ? rest[0] : ret;
            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                if ($$.bound[i])
                    $$.bound[i](value);
                if (ready)
                    make_dirty(component, i);
            }
            return ret;
        })
        : [];
    $$.update();
    ready = true;
    run_all($$.before_update);
    // `false` as a special case of no DOM component
    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
    if (options.target) {
        if (options.hydrate) {
            const nodes = children(options.target);
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.l(nodes);
            nodes.forEach(detach);
        }
        else {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.c();
        }
        if (options.intro)
            transition_in(component.$$.fragment);
        mount_component(component, options.target, options.anchor);
        flush();
    }
    set_current_component(parent_component);
}
class SvelteComponent {
    $destroy() {
        destroy_component(this, 1);
        this.$destroy = noop;
    }
    $on(type, callback) {
        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
        callbacks.push(callback);
        return () => {
            const index = callbacks.indexOf(callback);
            if (index !== -1)
                callbacks.splice(index, 1);
        };
    }
    $set() {
        // overridden by instance, if it has props
    }
}

function handle(node) {
  const onDown = getOnDown(node);

  node.addEventListener("touchstart", onDown);
  node.addEventListener("mousedown", onDown);
  return {
    destroy() {
      node.removeEventListener("touchstart", onDown);
      node.removeEventListener("mousedown", onDown);
    }
  };
}

function getOnDown(node) {
  const onMove = getOnMove(node);

  return function (e) {
    e.preventDefault();
    node.dispatchEvent(new CustomEvent("dragstart"));

    const moveevent = "touches" in e ? "touchmove" : "mousemove";
    const upevent = "touches" in e ? "touchend" : "mouseup";

    document.addEventListener(moveevent, onMove);
    document.addEventListener(upevent, onUp);

    function onUp(e) {
      e.stopPropagation();

      document.removeEventListener(moveevent, onMove);
      document.removeEventListener(upevent, onUp);

      node.dispatchEvent(new CustomEvent("dragend"));
    }  };
}

function getOnMove(node) {
  const track = node.parentNode;

  return function (e) {
    const { left, width } = track.getBoundingClientRect();
    const clickOffset = "touches" in e ? e.touches[0].clientX : e.clientX;
    const clickPos = Math.min(Math.max((clickOffset - left) / width, 0), 1) || 0;
    node.dispatchEvent(new CustomEvent("drag", { detail: clickPos }));
  };
}

/* src\Thumb.svelte generated by Svelte v3.22.3 */

function add_css() {
	var style = element("style");
	style.id = "svelte-vclev4-style";
	style.textContent = ".thumb.svelte-vclev4{position:absolute;top:50%;width:0;height:0}.thumb-content.svelte-vclev4{position:relative;width:fit-content;height:fit-content;transform:translate(-50%, -50%)}.thumb-content.svelte-vclev4::before{content:\"\";position:absolute;width:200%;height:200%;transform:translate(-25%, -25%) scale(0);border-radius:100vh;background:var(--thumb-bg, #5784fd);opacity:30%;transition:transform 100ms ease-in-out}.thumb-content.active.svelte-vclev4::before{transform:translate(-25%, -25%) scale(1)}";
	append(document.head, style);
}

function create_fragment(ctx) {
	let div1;
	let div0;
	let div1_style_value;
	let handle_action;
	let current;
	let dispose;
	const default_slot_template = /*$$slots*/ ctx[4].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			if (default_slot) default_slot.c();
			attr(div0, "class", "thumb-content svelte-vclev4");
			toggle_class(div0, "active", /*active*/ ctx[1]);
			attr(div1, "class", "thumb svelte-vclev4");
			attr(div1, "style", div1_style_value = `left: ${/*pos*/ ctx[0] * 100}%;`);
		},
		m(target, anchor, remount) {
			insert(target, div1, anchor);
			append(div1, div0);

			if (default_slot) {
				default_slot.m(div0, null);
			}

			current = true;
			if (remount) run_all(dispose);

			dispose = [
				action_destroyer(handle_action = handle.call(null, div1)),
				listen(div1, "dragstart", /*dragstart_handler*/ ctx[5]),
				listen(div1, "drag", /*drag_handler*/ ctx[6]),
				listen(div1, "dragend", /*dragend_handler*/ ctx[7])
			];
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 8) {
					default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[3], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[3], dirty, null));
				}
			}

			if (dirty & /*active*/ 2) {
				toggle_class(div0, "active", /*active*/ ctx[1]);
			}

			if (!current || dirty & /*pos*/ 1 && div1_style_value !== (div1_style_value = `left: ${/*pos*/ ctx[0] * 100}%;`)) {
				attr(div1, "style", div1_style_value);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (default_slot) default_slot.d(detaching);
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	const dispatch = createEventDispatcher();
	let { pos } = $$props, active;
	let { $$slots = {}, $$scope } = $$props;
	const dragstart_handler = () => ($$invalidate(1, active = true), dispatch("active", true));
	const drag_handler = ({ detail: v }) => $$invalidate(0, pos = v);
	const dragend_handler = () => ($$invalidate(1, active = false), dispatch("active", false));

	$$self.$set = $$props => {
		if ("pos" in $$props) $$invalidate(0, pos = $$props.pos);
		if ("$$scope" in $$props) $$invalidate(3, $$scope = $$props.$$scope);
	};

	return [
		pos,
		active,
		dispatch,
		$$scope,
		$$slots,
		dragstart_handler,
		drag_handler,
		dragend_handler
	];
}

class Thumb extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-vclev4-style")) add_css();
		init(this, options, instance, create_fragment, safe_not_equal, { pos: 0 });
	}
}

/* src\Slider.svelte generated by Svelte v3.22.3 */

function add_css$1() {
	var style = element("style");
	style.id = "svelte-1hpsykp-style";
	style.textContent = "input.svelte-1hpsykp{display:none}.track.svelte-1hpsykp{margin:16px 8px;position:relative;height:4px;width:calc(100% - 16px);border-radius:100vh;background:var(--track-bg, #ebebeb)}.progress.svelte-1hpsykp{position:absolute;left:0;right:0;top:0;bottom:0;border-radius:100vh;background:var(--progress-bg, #8abdff)}.thumb.svelte-1hpsykp{width:16px;height:16px;border-radius:100vh;background:var(--thumb-bg, #5784fd)}";
	append(document.head, style);
}

const get_right_slot_changes = dirty => ({});
const get_right_slot_context = ctx => ({});
const get_left_slot_changes = dirty => ({});
const get_left_slot_context = ctx => ({});

// (2:0) {#if range}
function create_if_block_1(ctx) {
	let input;
	let input_value_value;
	let input_name_value;

	return {
		c() {
			input = element("input");
			attr(input, "type", "number");
			input.value = input_value_value = /*value*/ ctx[0][1];
			attr(input, "name", input_name_value = /*name*/ ctx[1][1]);
			attr(input, "class", "svelte-1hpsykp");
		},
		m(target, anchor) {
			insert(target, input, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*value*/ 1 && input_value_value !== (input_value_value = /*value*/ ctx[0][1])) {
				input.value = input_value_value;
			}

			if (dirty & /*name*/ 2 && input_name_value !== (input_name_value = /*name*/ ctx[1][1])) {
				attr(input, "name", input_name_value);
			}
		},
		d(detaching) {
			if (detaching) detach(input);
		}
	};
}

// (11:12)           
function fallback_block_3(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			attr(div, "class", "thumb svelte-1hpsykp");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (10:22)         
function fallback_block_2(ctx) {
	let current;
	const default_slot_template = /*$$slots*/ ctx[14].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[19], null);
	const default_slot_or_fallback = default_slot || fallback_block_3();

	return {
		c() {
			if (default_slot_or_fallback) default_slot_or_fallback.c();
		},
		m(target, anchor) {
			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 524288) {
					default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[19], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[19], dirty, null));
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
		}
	};
}

// (9:2) <Thumb bind:pos={pos[0]} on:active={({ detail: v }) => active = v}>
function create_default_slot_1(ctx) {
	let current;
	const left_slot_template = /*$$slots*/ ctx[14].left;
	const left_slot = create_slot(left_slot_template, ctx, /*$$scope*/ ctx[19], get_left_slot_context);
	const left_slot_or_fallback = left_slot || fallback_block_2(ctx);

	return {
		c() {
			if (left_slot_or_fallback) left_slot_or_fallback.c();
		},
		m(target, anchor) {
			if (left_slot_or_fallback) {
				left_slot_or_fallback.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (left_slot) {
				if (left_slot.p && dirty & /*$$scope*/ 524288) {
					left_slot.p(get_slot_context(left_slot_template, ctx, /*$$scope*/ ctx[19], get_left_slot_context), get_slot_changes(left_slot_template, /*$$scope*/ ctx[19], dirty, get_left_slot_changes));
				}
			} else {
				if (left_slot_or_fallback && left_slot_or_fallback.p && dirty & /*$$scope*/ 524288) {
					left_slot_or_fallback.p(ctx, dirty);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(left_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(left_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (left_slot_or_fallback) left_slot_or_fallback.d(detaching);
		}
	};
}

// (16:2) {#if range}
function create_if_block(ctx) {
	let updating_pos;
	let current;

	function thumb_pos_binding_1(value) {
		/*thumb_pos_binding_1*/ ctx[17].call(null, value);
	}

	let thumb_props = {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	};

	if (/*pos*/ ctx[3][1] !== void 0) {
		thumb_props.pos = /*pos*/ ctx[3][1];
	}

	const thumb = new Thumb({ props: thumb_props });
	binding_callbacks.push(() => bind(thumb, "pos", thumb_pos_binding_1));
	thumb.$on("active", /*active_handler_1*/ ctx[18]);

	return {
		c() {
			create_component(thumb.$$.fragment);
		},
		m(target, anchor) {
			mount_component(thumb, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const thumb_changes = {};

			if (dirty & /*$$scope*/ 524288) {
				thumb_changes.$$scope = { dirty, ctx };
			}

			if (!updating_pos && dirty & /*pos*/ 8) {
				updating_pos = true;
				thumb_changes.pos = /*pos*/ ctx[3][1];
				add_flush_callback(() => updating_pos = false);
			}

			thumb.$set(thumb_changes);
		},
		i(local) {
			if (current) return;
			transition_in(thumb.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(thumb.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(thumb, detaching);
		}
	};
}

// (19:14)             
function fallback_block_1(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			attr(div, "class", "thumb svelte-1hpsykp");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (18:25)           
function fallback_block(ctx) {
	let current;
	const default_slot_template = /*$$slots*/ ctx[14].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[19], null);
	const default_slot_or_fallback = default_slot || fallback_block_1();

	return {
		c() {
			if (default_slot_or_fallback) default_slot_or_fallback.c();
		},
		m(target, anchor) {
			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 524288) {
					default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[19], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[19], dirty, null));
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
		}
	};
}

// (17:4) <Thumb bind:pos={pos[1]} on:active={({ detail: v }) => active = v}>
function create_default_slot(ctx) {
	let current;
	const right_slot_template = /*$$slots*/ ctx[14].right;
	const right_slot = create_slot(right_slot_template, ctx, /*$$scope*/ ctx[19], get_right_slot_context);
	const right_slot_or_fallback = right_slot || fallback_block(ctx);

	return {
		c() {
			if (right_slot_or_fallback) right_slot_or_fallback.c();
		},
		m(target, anchor) {
			if (right_slot_or_fallback) {
				right_slot_or_fallback.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (right_slot) {
				if (right_slot.p && dirty & /*$$scope*/ 524288) {
					right_slot.p(get_slot_context(right_slot_template, ctx, /*$$scope*/ ctx[19], get_right_slot_context), get_slot_changes(right_slot_template, /*$$scope*/ ctx[19], dirty, get_right_slot_changes));
				}
			} else {
				if (right_slot_or_fallback && right_slot_or_fallback.p && dirty & /*$$scope*/ 524288) {
					right_slot_or_fallback.p(ctx, dirty);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(right_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(right_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (right_slot_or_fallback) right_slot_or_fallback.d(detaching);
		}
	};
}

function create_fragment$1(ctx) {
	let input;
	let input_value_value;
	let input_name_value;
	let t0;
	let t1;
	let div1;
	let div0;
	let t2;
	let updating_pos;
	let t3;
	let current;
	let if_block0 = /*range*/ ctx[2] && create_if_block_1(ctx);

	function thumb_pos_binding(value) {
		/*thumb_pos_binding*/ ctx[15].call(null, value);
	}

	let thumb_props = {
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	};

	if (/*pos*/ ctx[3][0] !== void 0) {
		thumb_props.pos = /*pos*/ ctx[3][0];
	}

	const thumb = new Thumb({ props: thumb_props });
	binding_callbacks.push(() => bind(thumb, "pos", thumb_pos_binding));
	thumb.$on("active", /*active_handler*/ ctx[16]);
	let if_block1 = /*range*/ ctx[2] && create_if_block(ctx);

	return {
		c() {
			input = element("input");
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			div1 = element("div");
			div0 = element("div");
			t2 = space();
			create_component(thumb.$$.fragment);
			t3 = space();
			if (if_block1) if_block1.c();
			attr(input, "type", "number");
			input.value = input_value_value = /*value*/ ctx[0][0];
			attr(input, "name", input_name_value = /*name*/ ctx[1][0]);
			attr(input, "class", "svelte-1hpsykp");
			attr(div0, "class", "progress svelte-1hpsykp");
			attr(div0, "style", /*progress*/ ctx[5]);
			attr(div1, "class", "track svelte-1hpsykp");
		},
		m(target, anchor) {
			insert(target, input, anchor);
			insert(target, t0, anchor);
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t1, anchor);
			insert(target, div1, anchor);
			append(div1, div0);
			append(div1, t2);
			mount_component(thumb, div1, null);
			append(div1, t3);
			if (if_block1) if_block1.m(div1, null);
			current = true;
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*value*/ 1 && input_value_value !== (input_value_value = /*value*/ ctx[0][0])) {
				input.value = input_value_value;
			}

			if (!current || dirty & /*name*/ 2 && input_name_value !== (input_name_value = /*name*/ ctx[1][0])) {
				attr(input, "name", input_name_value);
			}

			if (/*range*/ ctx[2]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_1(ctx);
					if_block0.c();
					if_block0.m(t1.parentNode, t1);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (!current || dirty & /*progress*/ 32) {
				attr(div0, "style", /*progress*/ ctx[5]);
			}

			const thumb_changes = {};

			if (dirty & /*$$scope*/ 524288) {
				thumb_changes.$$scope = { dirty, ctx };
			}

			if (!updating_pos && dirty & /*pos*/ 8) {
				updating_pos = true;
				thumb_changes.pos = /*pos*/ ctx[3][0];
				add_flush_callback(() => updating_pos = false);
			}

			thumb.$set(thumb_changes);

			if (/*range*/ ctx[2]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*range*/ 4) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div1, null);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(thumb.$$.fragment, local);
			transition_in(if_block1);
			current = true;
		},
		o(local) {
			transition_out(thumb.$$.fragment, local);
			transition_out(if_block1);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(input);
			if (detaching) detach(t0);
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t1);
			if (detaching) detach(div1);
			destroy_component(thumb);
			if (if_block1) if_block1.d();
		}
	};
}

function checkPos(pos) {
	return [Math.min(...pos), Math.max(...pos)];
}

function instance$1($$self, $$props, $$invalidate) {
	const dispatch = createEventDispatcher();
	let { name = [] } = $$props;
	let { range = false } = $$props;
	let { min = 0 } = $$props;
	let { max = 100 } = $$props;
	let { step = 1 } = $$props;
	let { value = [min, max] } = $$props;
	let pos;
	let active = false;
	let { order = false } = $$props;

	function setValue(pos) {
		const offset = min % step;
		const width = max - min;
		$$invalidate(0, value = pos.map(v => min + v * width).map(v => Math.round((v - offset) / step) * step + offset));
		dispatch("input", value);
	}

	function setPos(value) {
		$$invalidate(3, pos = value.map(v => Math.min(Math.max(v, min), max)).map(v => (v - min) / (max - min)));
	}

	function clamp() {
		setPos(value);
		setValue(pos);
	}

	let { $$slots = {}, $$scope } = $$props;

	function thumb_pos_binding(value) {
		pos[0] = value;
		((($$invalidate(3, pos), $$invalidate(2, range)), $$invalidate(9, order)), $$invalidate(4, active));
	}

	const active_handler = ({ detail: v }) => $$invalidate(4, active = v);

	function thumb_pos_binding_1(value) {
		pos[1] = value;
		((($$invalidate(3, pos), $$invalidate(2, range)), $$invalidate(9, order)), $$invalidate(4, active));
	}

	const active_handler_1 = ({ detail: v }) => $$invalidate(4, active = v);

	$$self.$set = $$props => {
		if ("name" in $$props) $$invalidate(1, name = $$props.name);
		if ("range" in $$props) $$invalidate(2, range = $$props.range);
		if ("min" in $$props) $$invalidate(6, min = $$props.min);
		if ("max" in $$props) $$invalidate(7, max = $$props.max);
		if ("step" in $$props) $$invalidate(8, step = $$props.step);
		if ("value" in $$props) $$invalidate(0, value = $$props.value);
		if ("order" in $$props) $$invalidate(9, order = $$props.order);
		if ("$$scope" in $$props) $$invalidate(19, $$scope = $$props.$$scope);
	};

	let progress;

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*range, order, active, pos*/ 540) {
			 if (range && order && active) $$invalidate(3, pos = checkPos(pos));
		}

		if ($$self.$$.dirty & /*active, pos*/ 24) {
			 if (active) setValue(pos);
		}

		if ($$self.$$.dirty & /*active, value*/ 17) {
			 if (!active) setPos(value);
		}

		if ($$self.$$.dirty & /*min, max*/ 192) {
			 (clamp());
		}

		if ($$self.$$.dirty & /*range, pos*/ 12) {
			 $$invalidate(5, progress = `
    left: ${range ? Math.min(pos[0], pos[1]) * 100 : 0}%;
    right: ${100 - Math.max(pos[0], range ? pos[1] : pos[0]) * 100}%;
  `);
		}
	};

	return [
		value,
		name,
		range,
		pos,
		active,
		progress,
		min,
		max,
		step,
		order,
		dispatch,
		setValue,
		setPos,
		clamp,
		$$slots,
		thumb_pos_binding,
		active_handler,
		thumb_pos_binding_1,
		active_handler_1,
		$$scope
	];
}

class Slider extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-1hpsykp-style")) add_css$1();

		init(this, options, instance$1, create_fragment$1, safe_not_equal, {
			name: 1,
			range: 2,
			min: 6,
			max: 7,
			step: 8,
			value: 0,
			order: 9
		});
	}
}

export default Slider;
