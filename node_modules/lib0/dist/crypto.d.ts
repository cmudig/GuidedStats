export function deriveSymmetricKey(secret: string | Uint8Array, salt: string | Uint8Array, { extractable, usages }?: {
    extractable?: boolean | undefined;
    usages?: ("decrypt" | "encrypt" | "sign" | "verify")[] | undefined;
}): PromiseLike<CryptoKey>;
export function generateAsymmetricKey({ extractable, usages }?: {
    extractable?: boolean | undefined;
    usages?: ("decrypt" | "encrypt" | "sign" | "verify")[] | undefined;
}): Promise<CryptoKeyPair>;
export function exportKey(key: CryptoKey): Promise<JsonWebKey>;
export function importSymmetricKey(jwk: any, { extractable, usages }?: {
    extractable?: boolean | undefined;
    usages?: ("decrypt" | "encrypt" | "sign" | "verify")[] | undefined;
}): Promise<CryptoKey>;
export function importAsymmetricKey(jwk: any, { extractable, usages }?: {
    extractable?: boolean | undefined;
    usages?: ("decrypt" | "encrypt" | "sign" | "verify")[] | undefined;
}): Promise<CryptoKey>;
export function encrypt(data: Uint8Array, key: CryptoKey): PromiseLike<Uint8Array>;
export function decrypt(data: Uint8Array, key: CryptoKey): PromiseLike<Uint8Array>;
export function sign(data: Uint8Array, privateKey: CryptoKey): PromiseLike<Uint8Array>;
export function verify(signature: Uint8Array, data: Uint8Array, publicKey: CryptoKey): PromiseLike<boolean>;
//# sourceMappingURL=crypto.d.ts.map